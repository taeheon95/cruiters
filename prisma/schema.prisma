// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       BigInt   @id @default(autoincrement())
  name     String   @db.VarChar(20)
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt @map("update_at")
  profile  Profile?
  resume   Resume[]

  @@map("t_user")
}

model Profile {
  userId        BigInt
  birthDate     DateTime @map("birth_date") @db.Date
  countryNumber String   @map("country_number") @db.VarChar(10)
  contact       String   @db.VarChar(10)
  email         String   @db.VarChar(100)
  address       String   @db.VarChar(200)
  profileImage  String   @map("profile_image") @db.VarChar(100)
  User          User     @relation(fields: [userId], references: [id])

  @@id([userId])
  @@index([email])
  @@map("t_profile")
}

model Resume {
  id            BigInt          @id @default(autoincrement())
  title         String          @db.VarChar(100)
  birthDate     DateTime        @map("birth_date") @db.Date
  countryNumber String          @map("country_number") @db.VarChar(10)
  contact       String          @db.VarChar(20)
  address       String          @db.VarChar(200)
  email         String          @db.VarChar(100)
  profileImage  String          @map("profile_image") @db.VarChar(100)
  createAt      DateTime        @default(now()) @map("create_at")
  updateAt      DateTime        @updatedAt @map("update_at")
  education     Education[]
  career        Career[]
  Certification Certification[]
  CoverLetter   CoverLetter[]
  User          User            @relation(fields: [userId], references: [id])
  userId        BigInt          @map("user_id")

  @@index([userId])
  @@map("t_resume")
}

model CoverLetter {
  id       BigInt @id @default(autoincrement())
  title    String @db.VarChar(100)
  content  String
  resume   Resume @relation(fields: [resumeId], references: [id])
  resumeId BigInt

  @@index([resumeId])
  @@map("t_cover_letter")
}

enum EDUCATION_STATUS {
  GRADUATED // 졸업함
  ATTEND // 재학중
  ABSENCE // 휴학중
  LEAVED // 퇴학
  WILL_GRADUATE // 졸업예정
}

model Education {
  id       BigInt           @id @default(autoincrement())
  type     String           @map("school_type") @db.VarChar(20)
  name     String           @map("school_name") @db.VarChar(20)
  region   String           @map("school_region") @db.VarChar(20)
  started  DateTime
  ended    DateTime
  status   EDUCATION_STATUS @default(GRADUATED)
  resume   Resume           @relation(fields: [resumeId], references: [id])
  resumeId BigInt           @map("resume_id")

  @@index([resumeId])
  @@map("t_education")
}

enum CAREER_STATUS {
  WORKING // 재직중
  RESIGNED // 퇴사
}

model Career {
  id          BigInt        @id @default(autoincrement())
  companyName String        @map("company_name") @db.VarChar(100)
  department  String        @db.VarChar(20)
  started     DateTime
  ended       DateTime
  status      CAREER_STATUS @default(RESIGNED)
  resume      Resume        @relation(fields: [resumeId], references: [id])
  resumeId    BigInt        @map("resume_id")

  @@index([resumeId])
  @@map("t_career")
}

model Certification {
  id              BigInt   @id @default(autoincrement())
  name            String   @db.VarChar(100)
  acquisitionDate DateTime @map("acquisition_date")
  agency          String   @db.VarChar(100)
  grade           String   @db.VarChar(20)
  resume          Resume   @relation(fields: [resumeId], references: [id])
  resumeId        BigInt   @map("resume_id")

  @@index([resumeId])
  @@map("t_certification")
}
